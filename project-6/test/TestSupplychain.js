// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "Aditya Dhir"
    const originFarmInformation = "Delhi NCR"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best Supply Chain Item"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    /*Accounts:
(0) 0xfab8e767926334b01a232e0767924bd828b21574
(1) 0x9ce8db60ac7d8c7c5a6b056b3daf4382adb9200e
(2) 0x5866c18187bbdb16cabf07a85946e553410dcf34
(3) 0xacc91daca3342990f1f065c70a4029add4772624
(4) 0xd8f6456f08d9ca067ddef26e2335bf6bee5397dc
(5) 0x64559e6fa8c1c6a5ebde637204786265549718e1
(6) 0x6961d518e4e9a2c78d81bfda5437d48aed7059b1
(7) 0xc46536ef97d60afc53ea8f6a93262cc53b28c7c5
(8) 0x3f3487bcb45f4d1ad70fe109ed6439f026dac3bf
(9) 0xa2d39f9d63071aecf30f6c9299876281e01e700e

Private Keys:
(0) 00c84baafdb511fa4f717000486ca33a23fee6f2dc65905abec7c29ae0ea9697
(1) e1b3ebd7c79b1b13684a602058587e14b4351b0bcf803b2e16f12d2e0e235564
(2) d5359b4b4241ef06a34475e674a69bbf5f9a303d8a14919a12c011d71ee086eb
(3) 02fbb416c4f56a8eb82d7930d646b0b832c708c40d36c6555ae46b3c1da42410
(4) 193fa0805e79d3a5e7f4f06348fcbfb6d30067a1ad65773b43089a0859818ce0
(5) 6c1c6b0e02b841042dbc3fc7dd2b13be062283e89102426691fee85d80ef9811
(6) 4fc0dd3f1c490a96249cc341a51371f801b3486974904aa4a8d58424204a850c
(7) 7236104cf0db578d3cd1ea69ab9e23b3f3a8fa50892f063a0a1cf113c442eaf3
(8) cc380862857002979e0ad809d27506e1c6daaab8a9ce078340f5069d0e8f81d2
(9) 79667ab7a0e9c9de5bd23f1a095bc1ec93299aa8044cd527aa6063be47231c21

*/

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
    
    //all the accounts details
    

// 1st Test to allow farmer to harvest coffee
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
                
        // Declare and Initialize a variable for event
        var eventEmitted = false
                             
        // Mark an item as Harvested by calling function harvestItem()
        let tx = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        let myEvent = tx.logs[0].event

        // Watch the emitted event Harvested()
        if(myEvent == "Harvested"){
            eventEmitted = true; 
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State') //itemState == Harvested
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test to process coffee
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        //validates if the farmer has been added
        if(!(await supplyChain.isFarmer(originFarmerID))){            
            await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as Processed by calling function processtItem()
        let tx = await supplyChain.processItem(upc, {from:originFarmerID}); 
        let myEvent = tx.logs[0].event;  

        // Watch the emitted event Harvested()
        if(myEvent == "Processed"){
            eventEmitted = true; 
        } 

        
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State') //itemState == Processed
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        //validates if the farmer has been added
        if(!(await supplyChain.isFarmer(originFarmerID))){            
            await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as Packed by calling function packItem()
        let tx = await supplyChain.packItem(upc, {from:originFarmerID}); 
        let myEvent = tx.logs[0].event;  

        // Watch the emitted event Packed()
        if(myEvent == "Packed"){
            eventEmitted = true; 
        } 

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State') //itemState == Packed
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        //validates if the farmer has been added
        if(!(await supplyChain.isFarmer(originFarmerID))){            
            await supplyChain.addFarmer(originFarmerID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as ForSale by calling function sellItem()
        let tx = await supplyChain.sellItem(upc, productPrice, {from:originFarmerID}); 
        let myEvent = tx.logs[0].event;  

        // Watch the emitted event ForSale()
        if(myEvent == "ForSale"){
            eventEmitted = true; 
        } 

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State') //itemState == ForSale
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        //validates if the Distributor has been added
        if(!(await supplyChain.isDistributor(distributorID))){            
            await supplyChain.addDistributor(distributorID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as Sold by calling function buyItem()
        let tx = await supplyChain.buyItem(upc, {from:distributorID, value: web3.utils.toWei("1.5", "ether")});
        let myEvent = tx.logs[0].event;

        // Watch the emitted event Sold()
        if(myEvent == "Sold"){
            eventEmitted = true;
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State') //itemState == Sold
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //validates if the distributor has been added
        if(!(await supplyChain.isDistributor(distributorID))){            
            await supplyChain.addDistributor(distributorID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as Shipped by calling function shipItem()
        let tx = await supplyChain.shipItem(upc, {from:distributorID});
        let myEvent = tx.logs[0].event;

        // Watch the emitted event Shipped()
        if(myEvent == "Shipped"){
            eventEmitted = true;
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State') //itemState == Shipped
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //validates if the retailer has been added
        if(!(await supplyChain.isRetailer(retailerID))){            
            await supplyChain.addRetailer(retailerID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as Received by calling function receiveItem()
        let tx = await supplyChain.receiveItem(upc, {from:retailerID});
        let myEvent = tx.logs[0].event;

        // Watch the emitted event Received()
        if(myEvent == "Received"){
            eventEmitted = true;
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State') //itemState == Received
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        //validates if the retailer has been added
        if(!(await supplyChain.isConsumer(consumerID))){            
            await supplyChain.addConsumer(consumerID, {from: ownerID}); 
        }

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as Received by calling function purchaseItem()
        let tx = await supplyChain.purchaseItem(upc, {from:consumerID});
        let myEvent = tx.logs[0].event;

        // Watch the emitted event Received()
        if(myEvent == "Purchased"){
            eventEmitted = true;
        }

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State') //itemState == Purchased
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        //SKU
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        //UPC
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        //OWNER ID
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        //FARMER ID
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        //FARMER NAME
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        //item SKU'
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        //UPC
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product id')
        //ID
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product notes')
        //NOTES
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid product price')
        //PRICE
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')       
        //ITEMSTATE
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        //DISTRIBUTOR ID
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        //RETAILER ID
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
        //CONSUMER ID
    })

});

